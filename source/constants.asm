	IF ~DEF(CONSTANTS_SOURCE)
CONSTANTS_SOURCE SET 1 

ADDR_MYSTERY_RESET EQU 0x00A10008
ADDR_RESET EQU 0x00A1000C
ADDR_TMSS EQU 0x00A14000
ADDR_WORK_RAM EQU $ff0000

TO_FIXED EQU 256

SCREEN_WIDTH EQU 320
SCREEN_HEIGHT EQU 224

RAND_MULTIPLIER EQU 417
RAND_ADDER EQU 2345

; VDP Constants
ADDR_VDP_DATA EQU $00C00000
ADDR_VDP_CONTROL EQU $00C00004
ADDR_HV_COUNTER EQU $00C00008

VDP_COM_WRITE_SPRITE EQU $60000003
VDP_COM_READ_SPRITE  EQU $20000003 

VRAM_WRITE  EQU %000001
CRAM_WRITE  EQU %000011
VSRAM_WRITE EQU %000101
VRAM_READ   EQU %000000
CRAM_READ   EQU %001000
VSRAM_READ  EQU %000100

CRAM_PAL0_ADDR EQU 0 
CRAM_PAL1_ADDR EQU 32 
CRAM_PAL2_ADDR EQU 64 
CRAM_PAL3_ADDR EQU 96 

SET_VDP_REG_00 EQU $8000	; Mode Set Register #1
SET_VDP_REG_01 EQU $8100	; Mode Set Register #2 
SET_VDP_REG_02 EQU $8200	; VRAM Address for Scroll A
SET_VDP_REG_03 EQU $8300	; VRAM Address for Window 
SET_VDP_REG_04 EQU $8400	; VRAM Address for Scroll B 
SET_VDP_REG_05 EQU $8500	; VRAM Address for Sprite Attributes
SET_VDP_REG_07 EQU $8700	; Background color
SET_VDP_REG_0A EQU $8A00	; H Interrupt 
SET_VDP_REG_0B EQU $8B00	; Mode Set Register #3 
SET_VDP_REG_0C EQU $8C00	; Mode Set Register #4 
SET_VDP_REG_0D EQU $8D00	; VRAM Address for Horizontal Scroll 
SET_VDP_REG_0F EQU $8F00	; Autoincrement 
SET_VDP_REG_10 EQU $9000	; Scroll Size 
SET_VDP_REG_11 EQU $9100	; Window Horizontal Position
SET_VDP_REG_12 EQU $9200	; Window Vertical Position 
SET_VDP_REG_13 EQU $9300	; DMA Length Bits 7-0
SET_VDP_REG_14 EQU $9400	; DMA Length Bits 15-8 
SET_VDP_REG_15 EQU $9500	; DMA Source Address Bits 7-0 
SET_VDP_REG_16 EQU $9600	; DMA Source Address Bits 15-8
SET_VDP_REG_17 EQU $9700	; DMA Type 

; Sprite Constants 
MAX_SPRITES EQU 80 			; 80 sprites in 40 tile mode 
SPRITE_VERT_WORD    EQU 0 
SPRITE_SIZE_WORD    EQU 2
SPRITE_LINK_WORD    EQU 2 		; same word as the size word 
SPRITE_PATTERN_WORD EQU 4
SPRITE_HORI_WORD    EQU 6

SIZE_8  EQU 0 
SIZE_16 EQU 1 
SIZE_24 EQU 2 
SIZE_32 EQU 3 

; I/O Constants 
ADDR_CONTROLLER_DATA_PORT EQU $00A10003
GET_CONTROLLER_HIGH EQU $00
GET_CONTROLLER_LOW  EQU $40 
ADDR_CTRL1 EQU $00A10009
ADDR_CTRL2 EQU $00A1000B
ADDR_EXP   EQU $00A1000D

BUTTON_UP    EQU $0 
BUTTON_DOWN  EQU $1 
BUTTON_LEFT  EQU $2 
BUTTON_RIGHT EQU $3 
BUTTON_A     EQU $C
BUTTON_B     EQU $4 
BUTTON_C     EQU $5 
BUTTON_START EQU $D

; Genggle specific VDP consts 
PLANE_WIDTH  EQU 64 
PLANE_HEIGHT EQU 32 

ADDR_SCROLL_A_NAME_TABLE EQU $C000
ADDR_SCROLL_B_NAME_TABLE EQU $A000
ADDR_WINDOW_NAME_TABLE   EQU $8000
ADDR_SPRITE_NAME_TABLE   EQU $E000 

; Tile index locations 
TITLE_TILE_INDEX EQU 1 
RED_PEG_TILE_INDEX EQU 55
BLUE_PEG_TILE_INDEX EQU 59
PURPLE_PEG_TILE_INDEX EQU 63 
GREEN_PEG_TILE_INDEX EQU 67
SAVER_TILE_INDEX EQU 71
BALL_TILE_INDEX EQU 79 
GLYPH_TILE_INDEX EQU 80
DIGIT_TILE_INDEX EQU 89
LOSE_TILE_INDEX EQU 99 
WIN_TILE_INDEX EQU 104 
POINTER_TILE_INDEX EQU 108

; Start menu consts 
TITLE_X EQU 10
TITLE_Y EQU 8 
TITLE_ADDR EQU ADDR_SCROLL_A_NAME_TABLE+2*(TITLE_X+(TITLE_Y*PLANE_WIDTH)) 

; Game consts 
AIM_CENTER_X EQU 154*TO_FIXED
AIM_CENTER_Y EQU 5*TO_FIXED 
AIM_RADIUS EQU 30*TO_FIXED 
AIM_START_ANGLE EQU 90*TO_FIXED
AIM_ANGLE_DELTA EQU $140;TO_FIXED
AIM_ANGLE_MIN EQU 5*TO_FIXED
AIM_ANGLE_MAX EQU 175*TO_FIXED

LAUNCH_SPEED EQU 4*TO_FIXED 
GRAVITY EQU 18
FALLOUT_Y EQU 224*TO_FIXED
LEFT_BOUND EQU 0*TO_FIXED
RIGHT_BOUND EQU (320*TO_FIXED)-BALL_WIDTH

BALLS_STRING_X EQU 1 
BALLS_STRING_Y EQU 0
BALLS_STRING_ADDR EQU ADDR_SCROLL_A_NAME_TABLE+2*(BALLS_STRING_X+(BALLS_STRING_Y*PLANE_WIDTH)) 

SCORE_STRING_X EQU 29 
SCORE_STRING_Y EQU 0 
SCORE_STRING_ADDR EQU ADDR_SCROLL_A_NAME_TABLE+2*(SCORE_STRING_X+(SCORE_STRING_Y*PLANE_WIDTH)) 

SAVE_STRING_X EQU 2 
SAVE_STRING_Y EQU 2 
SAVE_STRING_ADDR EQU ADDR_SCROLL_A_NAME_TABLE+2*(SAVE_STRING_X+(SAVE_STRING_Y*PLANE_WIDTH)) 

LOSE_X EQU 11 
LOSE_Y EQU 9 
LOSE_ADDR EQU  ADDR_SCROLL_A_NAME_TABLE+2*(LOSE_X+(LOSE_Y*PLANE_WIDTH)) 

WIN_X EQU 12 
WIN_Y EQU 10 
WIN_ADDR EQU  ADDR_SCROLL_A_NAME_TABLE+2*(WIN_X+(WIN_Y*PLANE_WIDTH)) 
 
; Game states 
STATE_START   EQU 0 
STATE_AIM     EQU 1 
STATE_RESOLVE EQU 2 
STATE_LOSE    EQU 3 
STATE_WIN     EQU 4 

; Genggle Data sizes 
PEG_DATA_SIZE    EQU 32 
BALL_DATA_SIZE   EQU 32 
SAVER_DATA_SIZE  EQU 32 

; Shift values for multiplying 
PEG_SIZE_SHIFT   EQU 5 
BALL_SIZE_SHIFT  EQU 5 
SAVER_SIZE_SHIFT EQU 5 

; Game consts 
MAX_PEGS EQU 30 
MAX_GENGGLE_SPRITES EQU 36
SPRITE_DISABLE_X EQU 20 
SPRITE_DISABLE_Y EQU 20 

BALL_WIDTH EQU 8*TO_FIXED 
BALL_HEIGHT EQU 8*TO_FIXED
BALL_PATTERN EQU 67

PEG_INIT_X EQU -108*TO_FIXED
PEG_INIT_Y EQU -108*TO_FIXED
PEG_WIDTH  EQU 8*TO_FIXED
PEG_HEIGHT EQU 8*TO_FIXED
PEG_PALETTE EQU 1

PEG_TYPE_BLUE   EQU 0 
PEG_TYPE_RED    EQU 1 
PEG_TYPE_PURPLE EQU 2 

SAVER_INIT_X EQU 20*TO_FIXED 
SAVER_INIT_Y EQU 212*TO_FIXED 
SAVER_WIDTH EQU 32*TO_FIXED 
SAVER_HEIGHT EQU 8*TO_FIXED
SAVER_XVEL EQU 2*TO_FIXED
SAVER_RECT_OFFSET_X EQU 0 
SAVER_RECT_OFFSET_Y EQU 8 
SAVER_PALETTE EQU 1 
SAVER_LEFT_BOUND EQU 0*TO_FIXED
SAVER_RIGHT_BOUND EQU 288*TO_FIXED

BALL_SPRITE_INDEX  EQU 0 
SAVER_SPRITE_INDEX EQU 1 
PEGS_SPRITE_INDEX  EQU 2 
POINTER_1_INDEX EQU 34
POINTER_2_INDEX EQU 35 
POINTER_3_INDEX EQU 36 

NUM_LEVELS EQU 2 

LEVEL_PEG_COUNT_OFFSET     EQU 0 
LEVEL_RED_PEG_COUNT_OFFSET EQU 4 
LEVEL_BALL_COUNT_OFFSET    EQU 8 
LEVEL_PEGS_OFFSET          EQU 12 

;COLLISION_SCALE EQU $06
MAX_SQRT_INPUT EQU 128
DAMPENING_COEFFICIENT EQU $e0

; Glyph table
GLYPH_B EQU 80 
GLYPH_A EQU 81 
GLYPH_L EQU 82 
GLYPH_S EQU 83 
GLYPH_C EQU 84 
GLYPH_O EQU 85 
GLYPH_R EQU 86 
GLYPH_E EQU 87 
GLYPH_V EQU 88 
GLYPH_0 EQU 89
GLYPH_1 EQU 90
GLYPH_2 EQU 91
GLYPH_3 EQU 92
GLYPH_4 EQU 93
GLYPH_5 EQU 94
GLYPH_6 EQU 95
GLYPH_7 EQU 96
GLYPH_8 EQU 97
GLYPH_9 EQU 98 

RED_PEG_SCORE EQU 2 
BLUE_PEG_LOW_SCORE  EQU 4 
BLUE_PEG_MID_SCORE  EQU 2 
BLUE_PEG_HIGH_SCORE EQU 1
LOW_RED EQU 2 
MID_RED EQU 6
HIGH_RED EQU 32 
	ENDC